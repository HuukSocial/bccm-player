// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package media.bcc.bccm_player.pigeon;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class PredownloadApi {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PredownloadConfig {
    private @NonNull List<String> urls;

    public @NonNull List<String> getUrls() {
      return urls;
    }

    public void setUrls(@NonNull List<String> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"urls\" is null.");
      }
      this.urls = setterArg;
    }

    private @NonNull Boolean shouldPreloadFirstSegment;

    public @NonNull Boolean getShouldPreloadFirstSegment() {
      return shouldPreloadFirstSegment;
    }

    public void setShouldPreloadFirstSegment(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"shouldPreloadFirstSegment\" is null.");
      }
      this.shouldPreloadFirstSegment = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PredownloadConfig() {}

    public static final class Builder {

      private @Nullable List<String> urls;

      public @NonNull Builder setUrls(@NonNull List<String> setterArg) {
        this.urls = setterArg;
        return this;
      }

      private @Nullable Boolean shouldPreloadFirstSegment;

      public @NonNull Builder setShouldPreloadFirstSegment(@NonNull Boolean setterArg) {
        this.shouldPreloadFirstSegment = setterArg;
        return this;
      }

      public @NonNull PredownloadConfig build() {
        PredownloadConfig pigeonReturn = new PredownloadConfig();
        pigeonReturn.setUrls(urls);
        pigeonReturn.setShouldPreloadFirstSegment(shouldPreloadFirstSegment);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(urls);
      toListResult.add(shouldPreloadFirstSegment);
      return toListResult;
    }

    static @NonNull PredownloadConfig fromList(@NonNull ArrayList<Object> list) {
      PredownloadConfig pigeonResult = new PredownloadConfig();
      Object urls = list.get(0);
      pigeonResult.setUrls((List<String>) urls);
      Object shouldPreloadFirstSegment = list.get(1);
      pigeonResult.setShouldPreloadFirstSegment((Boolean) shouldPreloadFirstSegment);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    @SuppressWarnings("UnknownNullness")
    void success(T result);

    void error(@NonNull Throwable error);
  }

  private static class PredownloadPigeonCodec extends StandardMessageCodec {
    public static final PredownloadPigeonCodec INSTANCE = new PredownloadPigeonCodec();

    private PredownloadPigeonCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return PredownloadConfig.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof PredownloadConfig) {
        stream.write(128);
        writeValue(stream, ((PredownloadConfig) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface PredownloadPigeon {

    void predownloadDownload(@NonNull PredownloadConfig config, @NonNull Result<Void> result);

    /** The codec used by PredownloadPigeon. */
    static @NonNull MessageCodec<Object> getCodec() {
      return PredownloadPigeonCodec.INSTANCE;
    }
    /**Sets up an instance of `PredownloadPigeon` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable PredownloadPigeon api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.bccm_player.PredownloadPigeon.predownloadDownload", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PredownloadConfig configArg = (PredownloadConfig) args.get(0);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.predownloadDownload(configArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
