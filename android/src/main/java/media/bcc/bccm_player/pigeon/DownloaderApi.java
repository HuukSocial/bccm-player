// Autogenerated from Pigeon (v10.1.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package media.bcc.bccm_player.pigeon;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class DownloaderApi {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class DownloadConfig {
    private @NonNull String url;

    public @NonNull String getUrl() {
      return url;
    }

    public void setUrl(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"url\" is null.");
      }
      this.url = setterArg;
    }

    private @NonNull String mimeType;

    public @NonNull String getMimeType() {
      return mimeType;
    }

    public void setMimeType(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"mimeType\" is null.");
      }
      this.mimeType = setterArg;
    }

    private @NonNull String title;

    public @NonNull String getTitle() {
      return title;
    }

    public void setTitle(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"title\" is null.");
      }
      this.title = setterArg;
    }

    private @NonNull List<DownloaderTrack> tracks;

    public @NonNull List<DownloaderTrack> getTracks() {
      return tracks;
    }

    public void setTracks(@NonNull List<DownloaderTrack> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"tracks\" is null.");
      }
      this.tracks = setterArg;
    }

    private @NonNull Map<String, String> additionalData;

    public @NonNull Map<String, String> getAdditionalData() {
      return additionalData;
    }

    public void setAdditionalData(@NonNull Map<String, String> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"additionalData\" is null.");
      }
      this.additionalData = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    DownloadConfig() {}

    public static final class Builder {

      private @Nullable String url;

      public @NonNull Builder setUrl(@NonNull String setterArg) {
        this.url = setterArg;
        return this;
      }

      private @Nullable String mimeType;

      public @NonNull Builder setMimeType(@NonNull String setterArg) {
        this.mimeType = setterArg;
        return this;
      }

      private @Nullable String title;

      public @NonNull Builder setTitle(@NonNull String setterArg) {
        this.title = setterArg;
        return this;
      }

      private @Nullable List<DownloaderTrack> tracks;

      public @NonNull Builder setTracks(@NonNull List<DownloaderTrack> setterArg) {
        this.tracks = setterArg;
        return this;
      }

      private @Nullable Map<String, String> additionalData;

      public @NonNull Builder setAdditionalData(@NonNull Map<String, String> setterArg) {
        this.additionalData = setterArg;
        return this;
      }

      public @NonNull DownloadConfig build() {
        DownloadConfig pigeonReturn = new DownloadConfig();
        pigeonReturn.setUrl(url);
        pigeonReturn.setMimeType(mimeType);
        pigeonReturn.setTitle(title);
        pigeonReturn.setTracks(tracks);
        pigeonReturn.setAdditionalData(additionalData);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(5);
      toListResult.add(url);
      toListResult.add(mimeType);
      toListResult.add(title);
      toListResult.add(tracks);
      toListResult.add(additionalData);
      return toListResult;
    }

    static @NonNull DownloadConfig fromList(@NonNull ArrayList<Object> list) {
      DownloadConfig pigeonResult = new DownloadConfig();
      Object url = list.get(0);
      pigeonResult.setUrl((String) url);
      Object mimeType = list.get(1);
      pigeonResult.setMimeType((String) mimeType);
      Object title = list.get(2);
      pigeonResult.setTitle((String) title);
      Object tracks = list.get(3);
      pigeonResult.setTracks((List<DownloaderTrack>) tracks);
      Object additionalData = list.get(4);
      pigeonResult.setAdditionalData((Map<String, String>) additionalData);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class DownloaderTrack {
    private @NonNull String id;

    public @NonNull String getId() {
      return id;
    }

    public void setId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"id\" is null.");
      }
      this.id = setterArg;
    }

    private @Nullable String label;

    public @Nullable String getLabel() {
      return label;
    }

    public void setLabel(@Nullable String setterArg) {
      this.label = setterArg;
    }

    private @Nullable String language;

    public @Nullable String getLanguage() {
      return language;
    }

    public void setLanguage(@Nullable String setterArg) {
      this.language = setterArg;
    }

    private @Nullable Double frameRate;

    public @Nullable Double getFrameRate() {
      return frameRate;
    }

    public void setFrameRate(@Nullable Double setterArg) {
      this.frameRate = setterArg;
    }

    private @Nullable Long bitrate;

    public @Nullable Long getBitrate() {
      return bitrate;
    }

    public void setBitrate(@Nullable Long setterArg) {
      this.bitrate = setterArg;
    }

    private @Nullable Long width;

    public @Nullable Long getWidth() {
      return width;
    }

    public void setWidth(@Nullable Long setterArg) {
      this.width = setterArg;
    }

    private @Nullable Long height;

    public @Nullable Long getHeight() {
      return height;
    }

    public void setHeight(@Nullable Long setterArg) {
      this.height = setterArg;
    }

    private @NonNull Boolean isSelected;

    public @NonNull Boolean getIsSelected() {
      return isSelected;
    }

    public void setIsSelected(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"isSelected\" is null.");
      }
      this.isSelected = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    DownloaderTrack() {}

    public static final class Builder {

      private @Nullable String id;

      public @NonNull Builder setId(@NonNull String setterArg) {
        this.id = setterArg;
        return this;
      }

      private @Nullable String label;

      public @NonNull Builder setLabel(@Nullable String setterArg) {
        this.label = setterArg;
        return this;
      }

      private @Nullable String language;

      public @NonNull Builder setLanguage(@Nullable String setterArg) {
        this.language = setterArg;
        return this;
      }

      private @Nullable Double frameRate;

      public @NonNull Builder setFrameRate(@Nullable Double setterArg) {
        this.frameRate = setterArg;
        return this;
      }

      private @Nullable Long bitrate;

      public @NonNull Builder setBitrate(@Nullable Long setterArg) {
        this.bitrate = setterArg;
        return this;
      }

      private @Nullable Long width;

      public @NonNull Builder setWidth(@Nullable Long setterArg) {
        this.width = setterArg;
        return this;
      }

      private @Nullable Long height;

      public @NonNull Builder setHeight(@Nullable Long setterArg) {
        this.height = setterArg;
        return this;
      }

      private @Nullable Boolean isSelected;

      public @NonNull Builder setIsSelected(@NonNull Boolean setterArg) {
        this.isSelected = setterArg;
        return this;
      }

      public @NonNull DownloaderTrack build() {
        DownloaderTrack pigeonReturn = new DownloaderTrack();
        pigeonReturn.setId(id);
        pigeonReturn.setLabel(label);
        pigeonReturn.setLanguage(language);
        pigeonReturn.setFrameRate(frameRate);
        pigeonReturn.setBitrate(bitrate);
        pigeonReturn.setWidth(width);
        pigeonReturn.setHeight(height);
        pigeonReturn.setIsSelected(isSelected);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(8);
      toListResult.add(id);
      toListResult.add(label);
      toListResult.add(language);
      toListResult.add(frameRate);
      toListResult.add(bitrate);
      toListResult.add(width);
      toListResult.add(height);
      toListResult.add(isSelected);
      return toListResult;
    }

    static @NonNull DownloaderTrack fromList(@NonNull ArrayList<Object> list) {
      DownloaderTrack pigeonResult = new DownloaderTrack();
      Object id = list.get(0);
      pigeonResult.setId((String) id);
      Object label = list.get(1);
      pigeonResult.setLabel((String) label);
      Object language = list.get(2);
      pigeonResult.setLanguage((String) language);
      Object frameRate = list.get(3);
      pigeonResult.setFrameRate((Double) frameRate);
      Object bitrate = list.get(4);
      pigeonResult.setBitrate((bitrate == null) ? null : ((bitrate instanceof Integer) ? (Integer) bitrate : (Long) bitrate));
      Object width = list.get(5);
      pigeonResult.setWidth((width == null) ? null : ((width instanceof Integer) ? (Integer) width : (Long) width));
      Object height = list.get(6);
      pigeonResult.setHeight((height == null) ? null : ((height instanceof Integer) ? (Integer) height : (Long) height));
      Object isSelected = list.get(7);
      pigeonResult.setIsSelected((Boolean) isSelected);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class Download {
    private @NonNull String key;

    public @NonNull String getKey() {
      return key;
    }

    public void setKey(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"key\" is null.");
      }
      this.key = setterArg;
    }

    private @NonNull DownloadConfig config;

    public @NonNull DownloadConfig getConfig() {
      return config;
    }

    public void setConfig(@NonNull DownloadConfig setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"config\" is null.");
      }
      this.config = setterArg;
    }

    private @Nullable String offlineUrl;

    public @Nullable String getOfflineUrl() {
      return offlineUrl;
    }

    public void setOfflineUrl(@Nullable String setterArg) {
      this.offlineUrl = setterArg;
    }

    private @NonNull Boolean isFinished;

    public @NonNull Boolean getIsFinished() {
      return isFinished;
    }

    public void setIsFinished(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"isFinished\" is null.");
      }
      this.isFinished = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    Download() {}

    public static final class Builder {

      private @Nullable String key;

      public @NonNull Builder setKey(@NonNull String setterArg) {
        this.key = setterArg;
        return this;
      }

      private @Nullable DownloadConfig config;

      public @NonNull Builder setConfig(@NonNull DownloadConfig setterArg) {
        this.config = setterArg;
        return this;
      }

      private @Nullable String offlineUrl;

      public @NonNull Builder setOfflineUrl(@Nullable String setterArg) {
        this.offlineUrl = setterArg;
        return this;
      }

      private @Nullable Boolean isFinished;

      public @NonNull Builder setIsFinished(@NonNull Boolean setterArg) {
        this.isFinished = setterArg;
        return this;
      }

      public @NonNull Download build() {
        Download pigeonReturn = new Download();
        pigeonReturn.setKey(key);
        pigeonReturn.setConfig(config);
        pigeonReturn.setOfflineUrl(offlineUrl);
        pigeonReturn.setIsFinished(isFinished);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(key);
      toListResult.add((config == null) ? null : config.toList());
      toListResult.add(offlineUrl);
      toListResult.add(isFinished);
      return toListResult;
    }

    static @NonNull Download fromList(@NonNull ArrayList<Object> list) {
      Download pigeonResult = new Download();
      Object key = list.get(0);
      pigeonResult.setKey((String) key);
      Object config = list.get(1);
      pigeonResult.setConfig((config == null) ? null : DownloadConfig.fromList((ArrayList<Object>) config));
      Object offlineUrl = list.get(2);
      pigeonResult.setOfflineUrl((String) offlineUrl);
      Object isFinished = list.get(3);
      pigeonResult.setIsFinished((Boolean) isFinished);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class DownloadStatusChangedEvent {
    private @NonNull Download download;

    public @NonNull Download getDownload() {
      return download;
    }

    public void setDownload(@NonNull Download setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"download\" is null.");
      }
      this.download = setterArg;
    }

    private @NonNull Double progress;

    public @NonNull Double getProgress() {
      return progress;
    }

    public void setProgress(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"progress\" is null.");
      }
      this.progress = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    DownloadStatusChangedEvent() {}

    public static final class Builder {

      private @Nullable Download download;

      public @NonNull Builder setDownload(@NonNull Download setterArg) {
        this.download = setterArg;
        return this;
      }

      private @Nullable Double progress;

      public @NonNull Builder setProgress(@NonNull Double setterArg) {
        this.progress = setterArg;
        return this;
      }

      public @NonNull DownloadStatusChangedEvent build() {
        DownloadStatusChangedEvent pigeonReturn = new DownloadStatusChangedEvent();
        pigeonReturn.setDownload(download);
        pigeonReturn.setProgress(progress);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add((download == null) ? null : download.toList());
      toListResult.add(progress);
      return toListResult;
    }

    static @NonNull DownloadStatusChangedEvent fromList(@NonNull ArrayList<Object> list) {
      DownloadStatusChangedEvent pigeonResult = new DownloadStatusChangedEvent();
      Object download = list.get(0);
      pigeonResult.setDownload((download == null) ? null : Download.fromList((ArrayList<Object>) download));
      Object progress = list.get(1);
      pigeonResult.setProgress((Double) progress);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    @SuppressWarnings("UnknownNullness")
    void success(T result);

    void error(@NonNull Throwable error);
  }

  private static class DownloaderPigeonCodec extends StandardMessageCodec {
    public static final DownloaderPigeonCodec INSTANCE = new DownloaderPigeonCodec();

    private DownloaderPigeonCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return Download.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return Download.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return DownloadConfig.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return DownloaderTrack.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof Download) {
        stream.write(128);
        writeValue(stream, ((Download) value).toList());
      } else if (value instanceof Download) {
        stream.write(129);
        writeValue(stream, ((Download) value).toList());
      } else if (value instanceof DownloadConfig) {
        stream.write(130);
        writeValue(stream, ((DownloadConfig) value).toList());
      } else if (value instanceof DownloaderTrack) {
        stream.write(131);
        writeValue(stream, ((DownloaderTrack) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /**
   * An API called by the native side to notify about chromecast changes
   *
   * Generated interface from Pigeon that represents a handler of messages from Flutter.
   */
  public interface DownloaderPigeon {

    void startDownload(@NonNull DownloadConfig downloadConfig, @NonNull Result<Download> result);

    void getDownloadStatus(@NonNull String downloadKey, @NonNull Result<Double> result);

    void getDownloads(@NonNull Result<List<Download>> result);

    void getDownload(@NonNull String downloadKey, @NonNull Result<Download> result);

    void removeDownload(@NonNull String downloadKey, @NonNull Result<Void> result);

    /** The codec used by DownloaderPigeon. */
    static @NonNull MessageCodec<Object> getCodec() {
      return DownloaderPigeonCodec.INSTANCE;
    }
    /**Sets up an instance of `DownloaderPigeon` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable DownloaderPigeon api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.bccm_player.DownloaderPigeon.startDownload", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                DownloadConfig downloadConfigArg = (DownloadConfig) args.get(0);
                Result<Download> resultCallback =
                    new Result<Download>() {
                      public void success(Download result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.startDownload(downloadConfigArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.bccm_player.DownloaderPigeon.getDownloadStatus", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String downloadKeyArg = (String) args.get(0);
                Result<Double> resultCallback =
                    new Result<Double>() {
                      public void success(Double result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getDownloadStatus(downloadKeyArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.bccm_player.DownloaderPigeon.getDownloads", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<List<Download>> resultCallback =
                    new Result<List<Download>>() {
                      public void success(List<Download> result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getDownloads(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.bccm_player.DownloaderPigeon.getDownload", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String downloadKeyArg = (String) args.get(0);
                Result<Download> resultCallback =
                    new Result<Download>() {
                      public void success(Download result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getDownload(downloadKeyArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.bccm_player.DownloaderPigeon.removeDownload", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String downloadKeyArg = (String) args.get(0);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.removeDownload(downloadKeyArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class DownloaderListenerPigeonCodec extends StandardMessageCodec {
    public static final DownloaderListenerPigeonCodec INSTANCE = new DownloaderListenerPigeonCodec();

    private DownloaderListenerPigeonCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return Download.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return DownloadConfig.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return DownloadStatusChangedEvent.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return DownloaderTrack.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof Download) {
        stream.write(128);
        writeValue(stream, ((Download) value).toList());
      } else if (value instanceof DownloadConfig) {
        stream.write(129);
        writeValue(stream, ((DownloadConfig) value).toList());
      } else if (value instanceof DownloadStatusChangedEvent) {
        stream.write(130);
        writeValue(stream, ((DownloadStatusChangedEvent) value).toList());
      } else if (value instanceof DownloaderTrack) {
        stream.write(131);
        writeValue(stream, ((DownloaderTrack) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class DownloaderListenerPigeon {
    private final @NonNull BinaryMessenger binaryMessenger;

    public DownloaderListenerPigeon(@NonNull BinaryMessenger argBinaryMessenger) {
      this.binaryMessenger = argBinaryMessenger;
    }

    /** Public interface for sending reply. */ 
    @SuppressWarnings("UnknownNullness")
    public interface Reply<T> {
      void reply(T reply);
    }
    /** The codec used by DownloaderListenerPigeon. */
    static @NonNull MessageCodec<Object> getCodec() {
      return DownloaderListenerPigeonCodec.INSTANCE;
    }
    public void onDownloadStatusChanged(@NonNull DownloadStatusChangedEvent eventArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.bccm_player.DownloaderListenerPigeon.onDownloadStatusChanged", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(eventArg)),
          channelReply -> callback.reply(null));
    }
  }
}
