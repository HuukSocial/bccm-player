// Autogenerated from Pigeon (v10.1.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "DownloaderApi.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface DownloadConfig ()
+ (DownloadConfig *)fromList:(NSArray *)list;
+ (nullable DownloadConfig *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface DownloaderTrack ()
+ (DownloaderTrack *)fromList:(NSArray *)list;
+ (nullable DownloaderTrack *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface Download ()
+ (Download *)fromList:(NSArray *)list;
+ (nullable Download *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface DownloadStatusChangedEvent ()
+ (DownloadStatusChangedEvent *)fromList:(NSArray *)list;
+ (nullable DownloadStatusChangedEvent *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation DownloadConfig
+ (instancetype)makeWithUrl:(NSString *)url
    mimeType:(NSString *)mimeType
    title:(NSString *)title
    tracks:(NSArray<DownloaderTrack *> *)tracks
    additionalData:(NSDictionary<NSString *, NSString *> *)additionalData {
  DownloadConfig* pigeonResult = [[DownloadConfig alloc] init];
  pigeonResult.url = url;
  pigeonResult.mimeType = mimeType;
  pigeonResult.title = title;
  pigeonResult.tracks = tracks;
  pigeonResult.additionalData = additionalData;
  return pigeonResult;
}
+ (DownloadConfig *)fromList:(NSArray *)list {
  DownloadConfig *pigeonResult = [[DownloadConfig alloc] init];
  pigeonResult.url = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.url != nil, @"");
  pigeonResult.mimeType = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.mimeType != nil, @"");
  pigeonResult.title = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.title != nil, @"");
  pigeonResult.tracks = GetNullableObjectAtIndex(list, 3);
  NSAssert(pigeonResult.tracks != nil, @"");
  pigeonResult.additionalData = GetNullableObjectAtIndex(list, 4);
  NSAssert(pigeonResult.additionalData != nil, @"");
  return pigeonResult;
}
+ (nullable DownloadConfig *)nullableFromList:(NSArray *)list {
  return (list) ? [DownloadConfig fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.url ?: [NSNull null]),
    (self.mimeType ?: [NSNull null]),
    (self.title ?: [NSNull null]),
    (self.tracks ?: [NSNull null]),
    (self.additionalData ?: [NSNull null]),
  ];
}
@end

@implementation DownloaderTrack
+ (instancetype)makeWithId:(NSString *)id
    label:(nullable NSString *)label
    language:(nullable NSString *)language
    frameRate:(nullable NSNumber *)frameRate
    bitrate:(nullable NSNumber *)bitrate
    width:(nullable NSNumber *)width
    height:(nullable NSNumber *)height
    isSelected:(NSNumber *)isSelected {
  DownloaderTrack* pigeonResult = [[DownloaderTrack alloc] init];
  pigeonResult.id = id;
  pigeonResult.label = label;
  pigeonResult.language = language;
  pigeonResult.frameRate = frameRate;
  pigeonResult.bitrate = bitrate;
  pigeonResult.width = width;
  pigeonResult.height = height;
  pigeonResult.isSelected = isSelected;
  return pigeonResult;
}
+ (DownloaderTrack *)fromList:(NSArray *)list {
  DownloaderTrack *pigeonResult = [[DownloaderTrack alloc] init];
  pigeonResult.id = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.id != nil, @"");
  pigeonResult.label = GetNullableObjectAtIndex(list, 1);
  pigeonResult.language = GetNullableObjectAtIndex(list, 2);
  pigeonResult.frameRate = GetNullableObjectAtIndex(list, 3);
  pigeonResult.bitrate = GetNullableObjectAtIndex(list, 4);
  pigeonResult.width = GetNullableObjectAtIndex(list, 5);
  pigeonResult.height = GetNullableObjectAtIndex(list, 6);
  pigeonResult.isSelected = GetNullableObjectAtIndex(list, 7);
  NSAssert(pigeonResult.isSelected != nil, @"");
  return pigeonResult;
}
+ (nullable DownloaderTrack *)nullableFromList:(NSArray *)list {
  return (list) ? [DownloaderTrack fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.id ?: [NSNull null]),
    (self.label ?: [NSNull null]),
    (self.language ?: [NSNull null]),
    (self.frameRate ?: [NSNull null]),
    (self.bitrate ?: [NSNull null]),
    (self.width ?: [NSNull null]),
    (self.height ?: [NSNull null]),
    (self.isSelected ?: [NSNull null]),
  ];
}
@end

@implementation Download
+ (instancetype)makeWithKey:(NSString *)key
    config:(DownloadConfig *)config
    offlineUrl:(nullable NSString *)offlineUrl
    isFinished:(NSNumber *)isFinished {
  Download* pigeonResult = [[Download alloc] init];
  pigeonResult.key = key;
  pigeonResult.config = config;
  pigeonResult.offlineUrl = offlineUrl;
  pigeonResult.isFinished = isFinished;
  return pigeonResult;
}
+ (Download *)fromList:(NSArray *)list {
  Download *pigeonResult = [[Download alloc] init];
  pigeonResult.key = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.key != nil, @"");
  pigeonResult.config = [DownloadConfig nullableFromList:(GetNullableObjectAtIndex(list, 1))];
  NSAssert(pigeonResult.config != nil, @"");
  pigeonResult.offlineUrl = GetNullableObjectAtIndex(list, 2);
  pigeonResult.isFinished = GetNullableObjectAtIndex(list, 3);
  NSAssert(pigeonResult.isFinished != nil, @"");
  return pigeonResult;
}
+ (nullable Download *)nullableFromList:(NSArray *)list {
  return (list) ? [Download fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.key ?: [NSNull null]),
    (self.config ? [self.config toList] : [NSNull null]),
    (self.offlineUrl ?: [NSNull null]),
    (self.isFinished ?: [NSNull null]),
  ];
}
@end

@implementation DownloadStatusChangedEvent
+ (instancetype)makeWithDownload:(Download *)download
    progress:(NSNumber *)progress {
  DownloadStatusChangedEvent* pigeonResult = [[DownloadStatusChangedEvent alloc] init];
  pigeonResult.download = download;
  pigeonResult.progress = progress;
  return pigeonResult;
}
+ (DownloadStatusChangedEvent *)fromList:(NSArray *)list {
  DownloadStatusChangedEvent *pigeonResult = [[DownloadStatusChangedEvent alloc] init];
  pigeonResult.download = [Download nullableFromList:(GetNullableObjectAtIndex(list, 0))];
  NSAssert(pigeonResult.download != nil, @"");
  pigeonResult.progress = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.progress != nil, @"");
  return pigeonResult;
}
+ (nullable DownloadStatusChangedEvent *)nullableFromList:(NSArray *)list {
  return (list) ? [DownloadStatusChangedEvent fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.download ? [self.download toList] : [NSNull null]),
    (self.progress ?: [NSNull null]),
  ];
}
@end

@interface DownloaderPigeonCodecReader : FlutterStandardReader
@end
@implementation DownloaderPigeonCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [Download fromList:[self readValue]];
    case 129: 
      return [Download fromList:[self readValue]];
    case 130: 
      return [DownloadConfig fromList:[self readValue]];
    case 131: 
      return [DownloaderTrack fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface DownloaderPigeonCodecWriter : FlutterStandardWriter
@end
@implementation DownloaderPigeonCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[Download class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[Download class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[DownloadConfig class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[DownloaderTrack class]]) {
    [self writeByte:131];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface DownloaderPigeonCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation DownloaderPigeonCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[DownloaderPigeonCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[DownloaderPigeonCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *DownloaderPigeonGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    DownloaderPigeonCodecReaderWriter *readerWriter = [[DownloaderPigeonCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void DownloaderPigeonSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<DownloaderPigeon> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.bccm_player.DownloaderPigeon.startDownload"
        binaryMessenger:binaryMessenger
        codec:DownloaderPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startDownload:completion:)], @"DownloaderPigeon api (%@) doesn't respond to @selector(startDownload:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        DownloadConfig *arg_downloadConfig = GetNullableObjectAtIndex(args, 0);
        [api startDownload:arg_downloadConfig completion:^(Download *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.bccm_player.DownloaderPigeon.getDownloadStatus"
        binaryMessenger:binaryMessenger
        codec:DownloaderPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getDownloadStatus:completion:)], @"DownloaderPigeon api (%@) doesn't respond to @selector(getDownloadStatus:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_downloadKey = GetNullableObjectAtIndex(args, 0);
        [api getDownloadStatus:arg_downloadKey completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.bccm_player.DownloaderPigeon.getDownloads"
        binaryMessenger:binaryMessenger
        codec:DownloaderPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getDownloads:)], @"DownloaderPigeon api (%@) doesn't respond to @selector(getDownloads:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api getDownloads:^(NSArray<Download *> *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.bccm_player.DownloaderPigeon.getDownload"
        binaryMessenger:binaryMessenger
        codec:DownloaderPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getDownload:completion:)], @"DownloaderPigeon api (%@) doesn't respond to @selector(getDownload:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_downloadKey = GetNullableObjectAtIndex(args, 0);
        [api getDownload:arg_downloadKey completion:^(Download *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.bccm_player.DownloaderPigeon.removeDownload"
        binaryMessenger:binaryMessenger
        codec:DownloaderPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(removeDownload:completion:)], @"DownloaderPigeon api (%@) doesn't respond to @selector(removeDownload:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_downloadKey = GetNullableObjectAtIndex(args, 0);
        [api removeDownload:arg_downloadKey completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface DownloaderListenerPigeonCodecReader : FlutterStandardReader
@end
@implementation DownloaderListenerPigeonCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [Download fromList:[self readValue]];
    case 129: 
      return [DownloadConfig fromList:[self readValue]];
    case 130: 
      return [DownloadStatusChangedEvent fromList:[self readValue]];
    case 131: 
      return [DownloaderTrack fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface DownloaderListenerPigeonCodecWriter : FlutterStandardWriter
@end
@implementation DownloaderListenerPigeonCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[Download class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[DownloadConfig class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[DownloadStatusChangedEvent class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[DownloaderTrack class]]) {
    [self writeByte:131];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface DownloaderListenerPigeonCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation DownloaderListenerPigeonCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[DownloaderListenerPigeonCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[DownloaderListenerPigeonCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *DownloaderListenerPigeonGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    DownloaderListenerPigeonCodecReaderWriter *readerWriter = [[DownloaderListenerPigeonCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

@interface DownloaderListenerPigeon ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation DownloaderListenerPigeon

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)onDownloadStatusChanged:(DownloadStatusChangedEvent *)arg_event completion:(void (^)(FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.bccm_player.DownloaderListenerPigeon.onDownloadStatusChanged"
      binaryMessenger:self.binaryMessenger
      codec:DownloaderListenerPigeonGetCodec()];
  [channel sendMessage:@[arg_event ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
@end

