// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

enum DownloadStatus: Int {
  case downloading = 0
  case paused = 1
  case finished = 2
  case failed = 3
  case queued = 4
  case removing = 5
}

/// Generated class from Pigeon that represents data sent in messages.
struct DownloadConfig {
  var url: String
  var mimeType: String
  var title: String
  var audioTrackIds: [String?]
  var videoTrackIds: [String?]
  var additionalData: [String?: String?]

  static func fromList(_ list: [Any?]) -> DownloadConfig? {
    let url = list[0] as! String
    let mimeType = list[1] as! String
    let title = list[2] as! String
    let audioTrackIds = list[3] as! [String?]
    let videoTrackIds = list[4] as! [String?]
    let additionalData = list[5] as! [String?: String?]

    return DownloadConfig(
      url: url,
      mimeType: mimeType,
      title: title,
      audioTrackIds: audioTrackIds,
      videoTrackIds: videoTrackIds,
      additionalData: additionalData
    )
  }
  func toList() -> [Any?] {
    return [
      url,
      mimeType,
      title,
      audioTrackIds,
      videoTrackIds,
      additionalData,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct Download {
  var key: String
  var config: DownloadConfig
  var offlineUrl: String? = nil
  var fractionDownloaded: Double
  var status: DownloadStatus
  var error: String? = nil

  static func fromList(_ list: [Any?]) -> Download? {
    let key = list[0] as! String
    let config = DownloadConfig.fromList(list[1] as! [Any?])!
    let offlineUrl: String? = nilOrValue(list[2])
    let fractionDownloaded = list[3] as! Double
    let status = DownloadStatus(rawValue: list[4] as! Int)!
    let error: String? = nilOrValue(list[5])

    return Download(
      key: key,
      config: config,
      offlineUrl: offlineUrl,
      fractionDownloaded: fractionDownloaded,
      status: status,
      error: error
    )
  }
  func toList() -> [Any?] {
    return [
      key,
      config.toList(),
      offlineUrl,
      fractionDownloaded,
      status.rawValue,
      error,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct DownloadFailedEvent {
  var key: String
  var error: String? = nil

  static func fromList(_ list: [Any?]) -> DownloadFailedEvent? {
    let key = list[0] as! String
    let error: String? = nilOrValue(list[1])

    return DownloadFailedEvent(
      key: key,
      error: error
    )
  }
  func toList() -> [Any?] {
    return [
      key,
      error,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct DownloadRemovedEvent {
  var key: String

  static func fromList(_ list: [Any?]) -> DownloadRemovedEvent? {
    let key = list[0] as! String

    return DownloadRemovedEvent(
      key: key
    )
  }
  func toList() -> [Any?] {
    return [
      key,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct DownloadChangedEvent {
  var download: Download

  static func fromList(_ list: [Any?]) -> DownloadChangedEvent? {
    let download = Download.fromList(list[0] as! [Any?])!

    return DownloadChangedEvent(
      download: download
    )
  }
  func toList() -> [Any?] {
    return [
      download.toList(),
    ]
  }
}

private class DownloaderPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return Download.fromList(self.readValue() as! [Any?])
      case 129:
        return Download.fromList(self.readValue() as! [Any?])
      case 130:
        return DownloadConfig.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class DownloaderPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? Download {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? Download {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? DownloadConfig {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class DownloaderPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return DownloaderPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return DownloaderPigeonCodecWriter(data: data)
  }
}

class DownloaderPigeonCodec: FlutterStandardMessageCodec {
  static let shared = DownloaderPigeonCodec(readerWriter: DownloaderPigeonCodecReaderWriter())
}

/// An API called by the native side to notify about chromecast changes
///
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol DownloaderPigeon {
  func startDownload(downloadConfig: DownloadConfig, completion: @escaping (Result<Download, Error>) -> Void)
  func getDownloadStatus(downloadKey: String, completion: @escaping (Result<Double, Error>) -> Void)
  func getDownloads(completion: @escaping (Result<[Download], Error>) -> Void)
  func getDownload(downloadKey: String, completion: @escaping (Result<Download?, Error>) -> Void)
  func removeDownload(downloadKey: String, completion: @escaping (Result<Void, Error>) -> Void)
  /// Returns free space in bytes
  func getFreeDiskSpace(completion: @escaping (Result<Double, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class DownloaderPigeonSetup {
  /// The codec used by DownloaderPigeon.
  static var codec: FlutterStandardMessageCodec { DownloaderPigeonCodec.shared }
  /// Sets up an instance of `DownloaderPigeon` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: DownloaderPigeon?) {
    let startDownloadChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bccm_player.DownloaderPigeon.startDownload", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startDownloadChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let downloadConfigArg = args[0] as! DownloadConfig
        api.startDownload(downloadConfig: downloadConfigArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      startDownloadChannel.setMessageHandler(nil)
    }
    let getDownloadStatusChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bccm_player.DownloaderPigeon.getDownloadStatus", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getDownloadStatusChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let downloadKeyArg = args[0] as! String
        api.getDownloadStatus(downloadKey: downloadKeyArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getDownloadStatusChannel.setMessageHandler(nil)
    }
    let getDownloadsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bccm_player.DownloaderPigeon.getDownloads", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getDownloadsChannel.setMessageHandler { _, reply in
        api.getDownloads() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getDownloadsChannel.setMessageHandler(nil)
    }
    let getDownloadChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bccm_player.DownloaderPigeon.getDownload", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getDownloadChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let downloadKeyArg = args[0] as! String
        api.getDownload(downloadKey: downloadKeyArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getDownloadChannel.setMessageHandler(nil)
    }
    let removeDownloadChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bccm_player.DownloaderPigeon.removeDownload", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      removeDownloadChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let downloadKeyArg = args[0] as! String
        api.removeDownload(downloadKey: downloadKeyArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      removeDownloadChannel.setMessageHandler(nil)
    }
    /// Returns free space in bytes
    let getFreeDiskSpaceChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bccm_player.DownloaderPigeon.getFreeDiskSpace", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getFreeDiskSpaceChannel.setMessageHandler { _, reply in
        api.getFreeDiskSpace() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getFreeDiskSpaceChannel.setMessageHandler(nil)
    }
  }
}
private class DownloaderListenerPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return Download.fromList(self.readValue() as! [Any?])
      case 129:
        return DownloadChangedEvent.fromList(self.readValue() as! [Any?])
      case 130:
        return DownloadConfig.fromList(self.readValue() as! [Any?])
      case 131:
        return DownloadFailedEvent.fromList(self.readValue() as! [Any?])
      case 132:
        return DownloadRemovedEvent.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class DownloaderListenerPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? Download {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? DownloadChangedEvent {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? DownloadConfig {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? DownloadFailedEvent {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? DownloadRemovedEvent {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class DownloaderListenerPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return DownloaderListenerPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return DownloaderListenerPigeonCodecWriter(data: data)
  }
}

class DownloaderListenerPigeonCodec: FlutterStandardMessageCodec {
  static let shared = DownloaderListenerPigeonCodec(readerWriter: DownloaderListenerPigeonCodecReaderWriter())
}

/// Generated class from Pigeon that represents Flutter messages that can be called from Swift.
class DownloaderListenerPigeon {
  private let binaryMessenger: FlutterBinaryMessenger
  init(binaryMessenger: FlutterBinaryMessenger){
    self.binaryMessenger = binaryMessenger
  }
  var codec: FlutterStandardMessageCodec {
    return DownloaderListenerPigeonCodec.shared
  }
  func onDownloadStatusChanged(event eventArg: DownloadChangedEvent, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bccm_player.DownloaderListenerPigeon.onDownloadStatusChanged", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([eventArg] as [Any?]) { _ in
      completion()
    }
  }
  func onDownloadRemoved(event eventArg: DownloadRemovedEvent, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bccm_player.DownloaderListenerPigeon.onDownloadRemoved", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([eventArg] as [Any?]) { _ in
      completion()
    }
  }
  func onDownloadFailed(event eventArg: DownloadFailedEvent, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bccm_player.DownloaderListenerPigeon.onDownloadFailed", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([eventArg] as [Any?]) { _ in
      completion()
    }
  }
}
