// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated class from Pigeon that represents data sent in messages.
struct PredownloadConfig {
  var urls: [String?]
  var shouldPreloadFirstSegment: Bool

  static func fromList(_ list: [Any?]) -> PredownloadConfig? {
    let urls = list[0] as! [String?]
    let shouldPreloadFirstSegment = list[1] as! Bool

    return PredownloadConfig(
      urls: urls,
      shouldPreloadFirstSegment: shouldPreloadFirstSegment
    )
  }
  func toList() -> [Any?] {
    return [
      urls,
      shouldPreloadFirstSegment,
    ]
  }
}

private class PredownloadPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return PredownloadConfig.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class PredownloadPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? PredownloadConfig {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class PredownloadPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return PredownloadPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return PredownloadPigeonCodecWriter(data: data)
  }
}

class PredownloadPigeonCodec: FlutterStandardMessageCodec {
  static let shared = PredownloadPigeonCodec(readerWriter: PredownloadPigeonCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol PredownloadPigeon {
  func predownloadDownload(config: PredownloadConfig, completion: @escaping (Result<Void, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class PredownloadPigeonSetup {
  /// The codec used by PredownloadPigeon.
  static var codec: FlutterStandardMessageCodec { PredownloadPigeonCodec.shared }
  /// Sets up an instance of `PredownloadPigeon` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: PredownloadPigeon?) {
    let predownloadDownloadChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bccm_player.PredownloadPigeon.predownloadDownload", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      predownloadDownloadChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let configArg = args[0] as! PredownloadConfig
        api.predownloadDownload(config: configArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      predownloadDownloadChannel.setMessageHandler(nil)
    }
  }
}
